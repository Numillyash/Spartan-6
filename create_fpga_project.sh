#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ FPGA –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./create_fpga_project.sh <–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞> [—Ç–∏–ø_FPGA]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${BLUE}–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FPGA –ø—Ä–æ–µ–∫—Ç–∞${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞> [—Ç–∏–ø_FPGA]"
    echo ""
    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
    echo "  –∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞  - –ò–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    echo "  —Ç–∏–ø_FPGA     - –¢–∏–ø FPGA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: spartan6)"
    echo ""
    echo "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã FPGA:"
    echo "  spartan6     - Xilinx Spartan-6 (xc6slx25-ftg256-3)"
    echo "  spartan7     - Xilinx Spartan-7"
    echo "  artix7       - Xilinx Artix-7"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 my_blink_project"
    echo "  $0 uart_controller spartan7"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -eq 0 ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    show_help
    exit 0
fi

PROJECT_NAME="$1"
FPGA_TYPE="${2:-spartan6}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
if [ -d "$PROJECT_NAME" ]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$PROJECT_NAME' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    exit 1
fi

echo -e "${BLUE}–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FPGA –ø—Ä–æ–µ–∫—Ç–∞: ${YELLOW}$PROJECT_NAME${NC}"
echo -e "${BLUE}–¢–∏–ø FPGA: ${YELLOW}$FPGA_TYPE${NC}"
echo ""

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -e "${GREEN}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"
mkdir -p "$PROJECT_NAME"/{src,build,scripts,temp,docs}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ FPGA
case $FPGA_TYPE in
    "spartan6")
        DEVICE="xc6slx25-ftg256-3"
        CLK_FREQ="25"
        ;;
    "spartan7")
        DEVICE="xc7s25-csga324-1"
        CLK_FREQ="100"
        ;;
    "artix7")
        DEVICE="xc7a35t-cpg236-1"
        CLK_FREQ="100"
        ;;
    *)
        echo -e "${YELLOW}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø FPGA '$FPGA_TYPE', –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Spartan-6${NC}"
        DEVICE="xc6slx25-ftg256-3"
        CLK_FREQ="25"
        ;;
esac

echo -e "${GREEN}üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π Verilog –º–æ–¥—É–ª—å
cat > "$PROJECT_NAME/src/${PROJECT_NAME}.v" << EOF
\`timescale 1ns / 1ps

/**
 * –ú–æ–¥—É–ª—å: $PROJECT_NAME
 * –û–ø–∏—Å–∞–Ω–∏–µ: –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–æ–µ–∫—Ç–∞ $PROJECT_NAME
 * –ê–≤—Ç–æ—Ä: [–í–∞—à–µ –∏–º—è]
 * –î–∞—Ç–∞: $(date +%Y-%m-%d)
 * FPGA: $FPGA_TYPE ($DEVICE)
 */

module $PROJECT_NAME (
    input  wire clk,          // –¢–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ ${CLK_FREQ} –ú–ì—Ü
    input  wire reset_n,      // –°–±—Ä–æ—Å (–∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
    output wire led,          // –í—ã—Ö–æ–¥–Ω–æ–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥
    output wire debug_pin     // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    localparam CLK_FREQ = ${CLK_FREQ}_000_000;  // –ß–∞—Å—Ç–æ—Ç–∞ –≤ –ì—Ü
    localparam BLINK_FREQ = 1;                   // –ß–∞—Å—Ç–æ—Ç–∞ –º–∏–≥–∞–Ω–∏—è –≤ –ì—Ü
    localparam COUNTER_MAX = CLK_FREQ / (2 * BLINK_FREQ) - 1;

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    reg [\$clog2(COUNTER_MAX+1)-1:0] counter;
    reg led_reg;
    reg debug_reg;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initial begin
        counter <= 0;
        led_reg <= 1'b0;
        debug_reg <= 1'b0;
    end

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    always @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            counter <= 0;
            led_reg <= 1'b0;
            debug_reg <= 1'b0;
        end else begin
            if (counter >= COUNTER_MAX) begin
                counter <= 0;
                led_reg <= ~led_reg;
                debug_reg <= ~debug_reg;
            end else begin
                counter <= counter + 1;
            end
        end
    end

    // –í—ã—Ö–æ–¥—ã
    assign led = led_reg;
    assign debug_pin = debug_reg;

endmodule
EOF

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
cat > "$PROJECT_NAME/src/pinout.ucf" << EOF
# –§–∞–π–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ $PROJECT_NAME
# FPGA: $FPGA_TYPE ($DEVICE)
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(date +%Y-%m-%d)

# –¢–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞
NET "clk" LOC = P123;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω
NET "clk" IOSTANDARD = LVCMOS33;
NET "clk" TNM_NET = "clk";
TIMESPEC TS_clk = PERIOD "clk" ${CLK_FREQ} MHz HIGH 50%;

# –°–±—Ä–æ—Å
NET "reset_n" LOC = P124;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω  
NET "reset_n" IOSTANDARD = LVCMOS33;
NET "reset_n" PULLUP;

# –°–≤–µ—Ç–æ–¥–∏–æ–¥
NET "led" LOC = P125;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω
NET "led" IOSTANDARD = LVCMOS33;
NET "led" DRIVE = 8;
NET "led" SLEW = SLOW;

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
NET "debug_pin" LOC = P126;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω
NET "debug_pin" IOSTANDARD = LVCMOS33;
NET "debug_pin" DRIVE = 8;
NET "debug_pin" SLEW = FAST;

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
# –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
EOF

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
cat > "$PROJECT_NAME/scripts/compile.sh" << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ FPGA –ø—Ä–æ–µ–∫—Ç–∞

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
PROJECT_NAME=$(basename "$(dirname "$(pwd)")")
SRC_DIR="../src"
BUILD_DIR="../build"
TEMP_DIR="../temp"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ISE
if ! command -v xst &> /dev/null; then
    echo "–û—à–∏–±–∫–∞: Xilinx ISE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: source /opt/Xilinx/14.7/ISE_DS/settings64.sh"
    exit 1
fi

echo "========================================="
echo "–ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_NAME"
echo "========================================="

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$BUILD_DIR" "$TEMP_DIR"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ ! -f "$SRC_DIR/$PROJECT_NAME.v" ]; then
    echo "–û–®–ò–ë–ö–ê: –§–∞–π–ª $SRC_DIR/$PROJECT_NAME.v –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

if [ ! -f "$SRC_DIR/pinout.ucf" ]; then
    echo "–û–®–ò–ë–ö–ê: –§–∞–π–ª $SRC_DIR/pinout.ucf –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–±–æ—Ä–∫–∏
cp "$SRC_DIR/$PROJECT_NAME.v" .
cp "$SRC_DIR/pinout.ucf" .

# –°–æ–∑–¥–∞–µ–º XST —Å–∫—Ä–∏–ø—Ç
cat > "$PROJECT_NAME.xst" << XSTEOF
set -tmpdir "xst/projnav.tmp"
set -xsthdpdir "xst"
run
-ifn $PROJECT_NAME.prj
-ifmt mixed
-ofn $PROJECT_NAME
-ofmt NGC
-p xc6slx25-ftg256-3
-top $PROJECT_NAME
-opt_mode Speed
-opt_level 1
-power NO
-iuc NO
-keep_hierarchy No
-netlist_hierarchy As_Optimized
-write_timing_constraints NO
-cross_clock_analysis NO
-hierarchy_separator /
-bus_delimiter <>
-case Maintain
-slice_utilization_ratio 100
-bram_utilization_ratio 100
-dsp_utilization_ratio 100
-lc Auto
-reduce_control_sets Auto
-fsm_extract YES
-fsm_encoding Auto
-safe_implementation No
-fsm_style LUT
-ram_extract Yes
-ram_style Auto
-rom_extract Yes
-shreg_extract YES
-rom_style Auto
-auto_bram_packing NO
-resource_sharing YES
-async_to_sync NO
-use_dsp48 Auto
-iobuf YES
-max_fanout 100000
-bufg 16
-register_duplication YES
-register_balancing No
-optimize_primitives NO
-use_clock_enable Auto
-use_sync_set Auto
-use_sync_reset Auto
-iob Auto
-equivalent_register_removal YES
-slice_utilization_ratio_maxmargin 5
XSTEOF

# –°–æ–∑–¥–∞–µ–º PRJ —Ñ–∞–π–ª
echo "verilog work \"$PROJECT_NAME.v\"" > "$PROJECT_NAME.prj"

echo "1. –°–∏–Ω—Ç–µ–∑ (XST)..."
xst -intstyle ise -ifn "$PROJECT_NAME.xst" -ofn "$PROJECT_NAME.syr"
if [ $? -ne 0 ]; then
    echo "–û–®–ò–ë–ö–ê: –°–∏–Ω—Ç–µ–∑ –Ω–µ —É–¥–∞–ª—Å—è!"
    exit 1
fi

echo "2. NgdBuild..."
ngdbuild -intstyle ise -dd _ngo -nt timestamp -uc pinout.ucf -p xc6slx25-ftg256-3 "$PROJECT_NAME.ngc" "$PROJECT_NAME.ngd"
if [ $? -ne 0 ]; then
    echo "–û–®–ò–ë–ö–ê: NgdBuild –Ω–µ —É–¥–∞–ª—Å—è!"
    exit 1
fi

echo "3. MAP..."
map -intstyle ise -p xc6slx25-ftg256-3 -w -logic_opt off -ol high -t 1 -xt 0 -register_duplication off -r 4 -global_opt off -mt off -ir off -pr off -lc off -power off -o "${PROJECT_NAME}_map.ncd" "$PROJECT_NAME.ngd" "$PROJECT_NAME.pcf"
if [ $? -ne 0 ]; then
    echo "–û–®–ò–ë–ö–ê: MAP –Ω–µ —É–¥–∞–ª—Å—è!"
    exit 1
fi

echo "4. Place & Route..."
par -w -intstyle ise -ol high -mt off "${PROJECT_NAME}_map.ncd" "$PROJECT_NAME.ncd" "$PROJECT_NAME.pcf"
if [ $? -ne 0 ]; then
    echo "–û–®–ò–ë–ö–ê: Place & Route –Ω–µ —É–¥–∞–ª—Å—è!"
    exit 1
fi

echo "5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏—Ç—Ñ–∞–π–ª–∞..."
bitgen -w "$PROJECT_NAME.ncd" "$PROJECT_NAME.bit"
if [ $? -ne 0 ]; then
    echo "–û–®–ò–ë–ö–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏—Ç—Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!"
    exit 1
fi

# –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
mv "$PROJECT_NAME.bit" "$BUILD_DIR/"
[ -f "$PROJECT_NAME.mcs" ] && mv "$PROJECT_NAME.mcs" "$BUILD_DIR/"

# –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
mv *.log *.ngc *.ngd *.ncd *.pcf *.map *.mrp *.par *.pad *.drc *.bgn *.xpi *.stx *.syr *.lso *.cmd_log *.ptwx *.unroutes *.xrpt *.html *.xml *.csv *.txt *.prj *.xst "$TEMP_DIR/" 2>/dev/null || true
mv _ngo _xmsgs iseconfig xlnx_auto_0_xdb xst "$TEMP_DIR/" 2>/dev/null || true

echo "========================================="
echo "‚úÖ –ö–û–ú–ü–ò–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
echo "‚úÖ –ë–∏—Ç—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $BUILD_DIR/$PROJECT_NAME.bit"
ls -lh "$BUILD_DIR/$PROJECT_NAME.bit"
echo "========================================="
EOF

chmod +x "$PROJECT_NAME/scripts/compile.sh"

# –°–æ–∑–¥–∞–µ–º Makefile
cat > "$PROJECT_NAME/Makefile" << EOF
# Makefile –¥–ª—è FPGA –ø—Ä–æ–µ–∫—Ç–∞ $PROJECT_NAME

PROJECT_NAME = $PROJECT_NAME
TOP_MODULE = $PROJECT_NAME
VERILOG_SRC = src/$PROJECT_NAME.v
UCF_FILE = src/pinout.ucf

# –¶–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
.PHONY: all clean build program help

all: build

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build:
	@echo "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ \$(PROJECT_NAME)..."
	@mkdir -p build
	cd scripts && bash compile.sh

# –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ FPGA  
program:
	@echo "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ FPGA..."
	@if [ -f build/\$(PROJECT_NAME).bit ]; then \\
		echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Impact –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ç–æ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ build/\$(PROJECT_NAME).bit"; \\
	else \\
		echo "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª build/\$(PROJECT_NAME).bit –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'make build'"; \\
	fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
clean:
	@echo "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
	rm -rf temp/*
	rm -f *.log *.jou

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è build)
distclean: clean
	@echo "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
	rm -rf build/*

# –°–ø—Ä–∞–≤–∫–∞
help:
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  make build    - —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
	@echo "  make program  - –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å FPGA"
	@echo "  make clean    - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
	@echo "  make distclean- –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
	@echo "  make help     - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
tree:
	@echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
	@find . -type f -not -path "./temp/*" -not -path "./.git/*" | sort
EOF

# –°–æ–∑–¥–∞–µ–º .gitignore
cat > "$PROJECT_NAME/.gitignore" << 'EOF'
# ISE –∏ Vivado –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
temp/
*.log
*.jou
*.backup
*~

# –§–∞–π–ª—ã —Å–∏–Ω—Ç–µ–∑–∞
*.ngc
*.ngd
*.ngr
*.ncd
*.pcf
*.bld
*.mrp
*.map
*.par
*.pad
*.drc
*.bgn
*.xpi
*.stx
*.syr
*.lso
*.cmd_log
*.ptwx
*.unroutes
*.xwbt

# –û—Ç—á–µ—Ç—ã
*.xrpt
*.html
*.xml
*.csv
*.txt
usage_statistics_webtalk.html

# –°–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
_xmsgs/
_ngo/
iseconfig/
xlnx_auto_0_xdb/
xst/
.Xil/
vivado*

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
*.prj
*.xst

# OS —Ñ–∞–π–ª—ã
.DS_Store
Thumbs.db

# –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
*.bak
*.swp
*.swo
*~
EOF

# –°–æ–∑–¥–∞–µ–º README.md
cat > "$PROJECT_NAME/README.md" << EOF
# $PROJECT_NAME

–ü—Ä–æ–µ–∫—Ç –¥–ª—è FPGA $FPGA_TYPE.

## –û–ø–∏—Å–∞–Ω–∏–µ

[–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∑–¥–µ—Å—å]

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

### üìÅ src/
–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:
- \`${PROJECT_NAME}.v\` - –æ—Å–Ω–æ–≤–Ω–æ–π Verilog –º–æ–¥—É–ª—å
- \`pinout.ucf\` - —Ñ–∞–π–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤

### üìÅ build/
–ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏:
- \`*.bit\` - –±–∏—Ç—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏ FPGA
- \`*.mcs\` - —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MCS

### üìÅ scripts/
–°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
- \`compile.sh\` - bash —Å–∫—Ä–∏–ø—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏

### üìÅ temp/
–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏):
- –û—Ç—á–µ—Ç—ã —Å–∏–Ω—Ç–µ–∑–∞ –∏ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏
- –õ–æ–≥–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
- –°–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ISE

### üìÅ docs/
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ \`src/pinout.ucf\` - —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∏–Ω—ã –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—ã
2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ \`src/${PROJECT_NAME}.v\`
3. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: \`make build\`
4. –ü—Ä–æ—à–µ–π—Ç–µ FPGA —Ñ–∞–π–ª–æ–º \`build/${PROJECT_NAME}.bit\`

## –°–±–æ—Ä–∫–∞

\`\`\`bash
# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
make build

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
make clean

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
make distclean

# –°–ø—Ä–∞–≤–∫–∞
make help
\`\`\`

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

- **FPGA**: $FPGA_TYPE ($DEVICE)
- **–¢–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞**: ${CLK_FREQ} –ú–ì—Ü
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã**: Xilinx ISE

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–Ω–æ–≤ –≤ —Ñ–∞–π–ª–µ \`src/pinout.ucf\` –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π –ø–ª–∞—Ç–æ–π!

## –ê–≤—Ç–æ—Ä

[–í–∞—à–µ –∏–º—è]

## –õ–∏—Ü–µ–Ω–∑–∏—è

[–£–∫–∞–∂–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é]
EOF

# –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
touch "$PROJECT_NAME/docs/.gitkeep"

echo ""
echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç '$PROJECT_NAME' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!${NC}"
echo ""
echo -e "${YELLOW}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo -e "1. ${BLUE}cd $PROJECT_NAME${NC}"
echo -e "2. ${BLUE}–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ src/pinout.ucf –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—ã${NC}"
echo -e "3. ${BLUE}make build${NC} - –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"
echo ""
echo -e "${YELLOW}–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
find "$PROJECT_NAME" -type f | sed 's/^/  /' | sort
echo ""
echo -e "${GREEN}–ì–æ—Ç–æ–≤–æ! üéâ${NC}"
