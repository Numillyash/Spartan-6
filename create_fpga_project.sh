#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ FPGA –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TerosHDL
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./create_fpga_project_with_teroshdl.sh <–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞> [—Ç–∏–ø_FPGA]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${BLUE}–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FPGA –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TerosHDL${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞> [—Ç–∏–ø_FPGA]"
    echo ""
    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
    echo "  –∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞  - –ò–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    echo "  —Ç–∏–ø_FPGA     - –¢–∏–ø FPGA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: spartan6)"
    echo ""
    echo "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã FPGA:"
    echo "  spartan6     - Xilinx Spartan-6 (xc6slx25-ftg256-3)"
    echo "  spartan7     - Xilinx Spartan-7"
    echo "  artix7       - Xilinx Artix-7"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 my_blink_project"
    echo "  $0 uart_controller spartan7"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -eq 0 ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    show_help
    exit 0
fi

PROJECT_NAME="$1"
FPGA_TYPE="${2:-spartan6}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
if [ -d "$PROJECT_NAME" ]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$PROJECT_NAME' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    exit 1
fi

echo -e "${BLUE}–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FPGA –ø—Ä–æ–µ–∫—Ç–∞ —Å TerosHDL: ${YELLOW}$PROJECT_NAME${NC}"
echo -e "${BLUE}–¢–∏–ø FPGA: ${YELLOW}$FPGA_TYPE${NC}"
echo ""

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -e "${GREEN}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"
mkdir -p "$PROJECT_NAME"/{src,build,scripts,temp,docs,bitstreams,reports,synthesis}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ FPGA
case $FPGA_TYPE in
    "spartan6")
        DEVICE="xc6slx25-ftg256-3"
        FAMILY="spartan6"
        PACKAGE="ftg256"
        SPEED="-3"
        CLK_FREQ="25"
        ;;
    "spartan7")
        DEVICE="xc7s25-csga324-1"
        FAMILY="spartan7"
        PACKAGE="csga324"
        SPEED="-1"
        CLK_FREQ="100"
        ;;
    "artix7")
        DEVICE="xc7a35t-cpg236-1"
        FAMILY="artix7"
        PACKAGE="cpg236"
        SPEED="-1"
        CLK_FREQ="100"
        ;;
    *)
        echo -e "${YELLOW}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø FPGA '$FPGA_TYPE', –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Spartan-6${NC}"
        DEVICE="xc6slx25-ftg256-3"
        FAMILY="spartan6"
        PACKAGE="ftg256"
        SPEED="-3"
        CLK_FREQ="25"
        ;;
esac

echo -e "${GREEN}üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TerosHDL
cat > "$PROJECT_NAME/teroshdl.json" << TEROS_EOF
{
  "project": {
    "name": "$PROJECT_NAME",
    "description": "FPGA –ø—Ä–æ–µ–∫—Ç $PROJECT_NAME –¥–ª—è $FPGA_TYPE",
    "version": "1.0.0",
    "fpga": {
      "family": "$FAMILY",
      "device": "${DEVICE%%-*}",
      "package": "$PACKAGE",
      "speed": "$SPEED"
    }
  },
  "tools": {
    "synthesizer": "xilinx",
    "simulator": "ghdl",
    "build_dir": "build"
  },
  "files": [
    {
      "path": "src/$PROJECT_NAME.v",
      "type": "verilog",
      "is_toplevel": true
    },
    {
      "path": "src/pinout.ucf",
      "type": "constraint"
    }
  ],
  "toplevel": "$PROJECT_NAME"
}
TEROS_EOF

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π Verilog –º–æ–¥—É–ª—å
cat > "$PROJECT_NAME/src/${PROJECT_NAME}.v" << VERILOG_EOF
\`timescale 1ns / 1ps

/**
 * –ú–æ–¥—É–ª—å: $PROJECT_NAME
 * –û–ø–∏—Å–∞–Ω–∏–µ: –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–æ–µ–∫—Ç–∞ $PROJECT_NAME
 * –ê–≤—Ç–æ—Ä: [–í–∞—à–µ –∏–º—è]
 * –î–∞—Ç–∞: $(date +%Y-%m-%d)
 * FPGA: $FPGA_TYPE ($DEVICE)
 */

module $PROJECT_NAME (
    input  wire clk,          // –¢–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ ${CLK_FREQ} –ú–ì—Ü
    input  wire reset_n,      // –°–±—Ä–æ—Å (–∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
    output wire led,          // –í—ã—Ö–æ–¥–Ω–æ–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥
    output wire debug_pin     // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    localparam CLK_FREQ = ${CLK_FREQ}_000_000;  // –ß–∞—Å—Ç–æ—Ç–∞ –≤ –ì—Ü
    localparam BLINK_FREQ = 1;                   // –ß–∞—Å—Ç–æ—Ç–∞ –º–∏–≥–∞–Ω–∏—è –≤ –ì—Ü
    localparam COUNTER_MAX = CLK_FREQ / (2 * BLINK_FREQ) - 1;

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    reg [\$clog2(COUNTER_MAX+1)-1:0] counter;
    reg led_reg;
    reg debug_reg;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initial begin
        counter <= 0;
        led_reg <= 1'b0;
        debug_reg <= 1'b0;
    end

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    always @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            counter <= 0;
            led_reg <= 1'b0;
            debug_reg <= 1'b0;
        end else begin
            if (counter >= COUNTER_MAX) begin
                counter <= 0;
                led_reg <= ~led_reg;
                debug_reg <= ~debug_reg;
            end else begin
                counter <= counter + 1;
            end
        end
    end

    // –í—ã—Ö–æ–¥—ã
    assign led = led_reg;
    assign debug_pin = debug_reg;

endmodule
VERILOG_EOF

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
cat > "$PROJECT_NAME/src/pinout.ucf" << UCF_EOF
# –§–∞–π–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ $PROJECT_NAME
# FPGA: $FPGA_TYPE ($DEVICE)
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(date +%Y-%m-%d)

# –¢–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞
NET "clk" LOC = P123;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—ã
NET "clk" IOSTANDARD = LVCMOS33;
NET "clk" TNM_NET = "clk";
TIMESPEC TS_clk = PERIOD "clk" ${CLK_FREQ} MHz HIGH 50%;

# –°–±—Ä–æ—Å
NET "reset_n" LOC = P124;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—ã
NET "reset_n" IOSTANDARD = LVCMOS33;
NET "reset_n" PULLUP;

# –°–≤–µ—Ç–æ–¥–∏–æ–¥
NET "led" LOC = P125;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—ã
NET "led" IOSTANDARD = LVCMOS33;
NET "led" DRIVE = 8;
NET "led" SLEW = SLOW;

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
NET "debug_pin" LOC = P126;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—ã
NET "debug_pin" IOSTANDARD = LVCMOS33;
NET "debug_pin" DRIVE = 8;
NET "debug_pin" SLEW = FAST;

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
# –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
UCF_EOF

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–±–æ—Ä–∫–∏ TerosHDL
cat > "$PROJECT_NAME/scripts/copy_build_results.sh" << 'COPY_SCRIPT_EOF'
#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏ TerosHDL
# –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞

TEROSHDL_BUILD_DIR="/root/.teroshdl/build"
PROJECT_DIR="$(dirname "$(dirname "$(realpath "$0")")")"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
BUILD_DIR="$PROJECT_DIR/build"
BITSTREAMS_DIR="$PROJECT_DIR/bitstreams" 
REPORTS_DIR="$PROJECT_DIR/reports"
SYNTHESIS_DIR="$PROJECT_DIR/synthesis"
TEMP_DIR="$PROJECT_DIR/temp"

# –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$BUILD_DIR" "$BITSTREAMS_DIR" "$REPORTS_DIR" "$SYNTHESIS_DIR" "$TEMP_DIR"

echo "=== –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏ TerosHDL ==="
echo "–ò—Å—Ç–æ—á–Ω–∏–∫: $TEROSHDL_BUILD_DIR"
echo "–ü—Ä–æ–µ–∫—Ç: $PROJECT_DIR"

if [ ! -d "$TEROSHDL_BUILD_DIR" ]; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏ TerosHDL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $TEROSHDL_BUILD_DIR"
    echo "   –í–æ–∑–º–æ–∂–Ω–æ, —Å–±–æ—Ä–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —á–µ—Ä–µ–∑ TerosHDL"
    exit 1
fi

echo ""
echo "üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º:"

# 1. –ë–∏—Ç—Å—Ç—Ä–∏–º—ã –∏ —Ñ–∞–π–ª—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è -> bitstreams/
echo -n "  üîß –ë–∏—Ç—Å—Ç—Ä–∏–º—ã –∏ —Ñ–∞–π–ª—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è... "
BITSTREAM_COUNT=0
for ext in bit mcs bin; do
    if cp "$TEROSHDL_BUILD_DIR"/*.$ext "$BITSTREAMS_DIR/" 2>/dev/null; then
        BITSTREAM_COUNT=$((BITSTREAM_COUNT + $(ls "$TEROSHDL_BUILD_DIR"/*.$ext 2>/dev/null | wc -l)))
    fi
done
echo "—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ $BITSTREAM_COUNT —Ñ–∞–π–ª–æ–≤"

# 2. –§–∞–π–ª—ã —Å–∏–Ω—Ç–µ–∑–∞ -> synthesis/
echo -n "  ‚öôÔ∏è  –§–∞–π–ª—ã —Å–∏–Ω—Ç–µ–∑–∞... "
SYNTH_COUNT=0
for ext in ngc ngd ncd pcf; do
    if cp "$TEROSHDL_BUILD_DIR"/*.$ext "$SYNTHESIS_DIR/" 2>/dev/null; then
        SYNTH_COUNT=$((SYNTH_COUNT + $(ls "$TEROSHDL_BUILD_DIR"/*.$ext 2>/dev/null | wc -l)))
    fi
done
echo "—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ $SYNTH_COUNT —Ñ–∞–π–ª–æ–≤"

# 3. –û—Ç—á–µ—Ç—ã -> reports/
echo -n "  üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑... "
REPORT_COUNT=0
for ext in xrpt mrp map par pad csv txt xml html; do
    if cp "$TEROSHDL_BUILD_DIR"/*.$ext "$REPORTS_DIR/" 2>/dev/null; then
        REPORT_COUNT=$((REPORT_COUNT + $(ls "$TEROSHDL_BUILD_DIR"/*.$ext 2>/dev/null | wc -l)))
    fi
done
echo "—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ $REPORT_COUNT —Ñ–∞–π–ª–æ–≤"

# 4. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã -> build/ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
echo -n "  üì¶ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏... "
BUILD_COUNT=0
find "$TEROSHDL_BUILD_DIR" -maxdepth 1 -type f \( \
    -name "*.bgn" -o -name "*.bld" -o -name "*.drc" -o \
    -name "*.lso" -o -name "*.prj" -o -name "*.xst" -o \
    -name "*.syr" -o -name "*.cmd_log" -o -name "*.ptwx" -o \
    -name "*.unroutes" -o -name "*.xpi" -o -name "*.stx" -o \
    -name "*.ut" -o -name "*.twr" -o -name "*.twx" \) \
    -exec cp {} "$BUILD_DIR/" \; 2>/dev/null || true
BUILD_COUNT=$(find "$BUILD_DIR" -maxdepth 1 -type f 2>/dev/null | wc -l)
echo "—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ build/"

# 5. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã -> temp/ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
echo -n "  üóÇÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã... "
cp -r "$TEROSHDL_BUILD_DIR"/_ngo "$TEMP_DIR/" 2>/dev/null || true
cp -r "$TEROSHDL_BUILD_DIR"/_xmsgs "$TEMP_DIR/" 2>/dev/null || true
cp -r "$TEROSHDL_BUILD_DIR"/xlnx_auto_0_xdb "$TEMP_DIR/" 2>/dev/null || true
cp -r "$TEROSHDL_BUILD_DIR"/xst "$TEMP_DIR/" 2>/dev/null || true
TEMP_COUNT=$(find "$TEMP_DIR" -type f 2>/dev/null | wc -l)
echo "—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ $TEMP_COUNT —Ñ–∞–π–ª–æ–≤"

echo ""
echo "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:"
echo "  üìÅ bitstreams/ : $(find "$BITSTREAMS_DIR" -maxdepth 1 -type f 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
echo "  üìÅ synthesis/  : $(find "$SYNTHESIS_DIR" -maxdepth 1 -type f 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
echo "  üìÅ reports/    : $(find "$REPORTS_DIR" -maxdepth 1 -type f 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
echo "  üìÅ build/      : $(find "$BUILD_DIR" -maxdepth 1 -type f 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
echo "  üìÅ temp/       : $(find "$TEMP_DIR" -type f 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
echo ""
echo "üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
if ls "$BITSTREAMS_DIR"/*.bit >/dev/null 2>&1; then
    echo "  ‚úÖ –ë–∏—Ç—Å—Ç—Ä–∏–º: $(ls "$BITSTREAMS_DIR"/*.bit | head -1)"
    ls -lh "$BITSTREAMS_DIR"/*.bit | awk '{print "     –†–∞–∑–º–µ—Ä: " $5}'
fi

if ls "$REPORTS_DIR"/*summary* >/dev/null 2>&1; then
    echo "  üìä –°–≤–æ–¥–∫–∞: $(ls "$REPORTS_DIR"/*summary* | head -1)"
fi

if ls "$REPORTS_DIR"/*usage* >/dev/null 2>&1; then
    echo "  üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤: $(ls "$REPORTS_DIR"/*usage* | head -1)"
fi

echo ""
echo "‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
COPY_SCRIPT_EOF

chmod +x "$PROJECT_NAME/scripts/copy_build_results.sh"

# –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –≤ git
touch "$PROJECT_NAME/docs/.gitkeep"
touch "$PROJECT_NAME/bitstreams/.gitkeep" 
touch "$PROJECT_NAME/reports/.gitkeep"
touch "$PROJECT_NAME/synthesis/.gitkeep"
touch "$PROJECT_NAME/temp/.gitkeep"

echo ""
echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç '$PROJECT_NAME' —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TerosHDL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!${NC}"
echo ""
echo -e "${YELLOW}üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo -e "1. ${BLUE}cd $PROJECT_NAME${NC}"
echo -e "2. ${BLUE}code .${NC} - –æ—Ç–∫—Ä—ã—Ç—å –≤ VS Code"
echo -e "3. ${BLUE}–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ src/pinout.ucf –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—ã${NC}"
echo -e "4. ${BLUE}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TerosHDL –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞${NC}"
echo -e "5. ${BLUE}./scripts/copy_build_results.sh${NC} - –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
echo ""
echo -e "${GREEN}üéâ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TerosHDL –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ TerosHDL
add_project_to_teroshdl() {
    local project_name="$1"
    local project_path="$2"
    local toplevel_file="$3"
    local constraint_file="$4"
    local device="$5"
    local family="$6"
    local package="$7"
    local speed="$8"
    
    local teroshdl_config="/root/.teroshdl2_prj.json"
    
    echo -e "${BLUE}üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TerosHDL...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TerosHDL
    if [ ! -f "$teroshdl_config" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TerosHDL –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...${NC}"
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        cat > "$teroshdl_config" << TEROSHDL_BASE
{
    "selected_project": "$project_name",
    "project_list": []
}
TEROSHDL_BASE
    fi
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    local new_project=$(cat << NEW_PROJECT_JSON
{
    "name": "$project_name",
    "project_disk_path": "",
    "project_type": "genericProject",
    "toplevel": "$toplevel_file",
    "files": [
        {
            "name": "$toplevel_file",
            "file_type": "verilogSource",
            "is_include_file": false,
            "include_path": "",
            "logical_name": "",
            "is_manual": false,
            "file_version": "2000",
            "source_type": "none"
        },
        {
            "name": "$constraint_file",
            "file_type": "none",
            "is_include_file": false,
            "include_path": "",
            "logical_name": "",
            "is_manual": true,
            "source_type": "none"
        }
    ],
    "hooks": {
        "pre_build": [],
        "post_build": [],
        "pre_run": [],
        "post_run": []
    },
    "watchers": [],
    "configuration": {},
    "tool_options": {
        "ise": {
            "name": "ise",
            "installation_path": "/opt/Xilinx/14.7/ISE_DS",
            "config": {
                "installation_path": "/opt/Xilinx/14.7/ISE_DS",
                "family": "$family",
                "device": "${device%%-*}",
                "package": "$package", 
                "speed": "$speed"
            }
        }
    }
}
NEW_PROJECT_JSON
)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    local existing_project=$(jq -r ".project_list[] | select(.name == \"$project_name\") | .name" "$teroshdl_config" 2>/dev/null)
    
    if [ "$existing_project" = "$project_name" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç '$project_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ TerosHDL, –æ–±–Ω–æ–≤–ª—è–µ–º...${NC}"
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        jq --argjson new_project "$new_project" \
           --arg project_name "$project_name" \
           '.project_list = (.project_list | map(select(.name != $project_name))) + [$new_project] | .selected_project = $project_name' \
           "$teroshdl_config" > "${teroshdl_config}.tmp" && mv "${teroshdl_config}.tmp" "$teroshdl_config"
    else
        echo -e "${GREEN}‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç '$project_name' –≤ TerosHDL...${NC}"
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        jq --argjson new_project "$new_project" \
           --arg project_name "$project_name" \
           '.project_list += [$new_project] | .selected_project = $project_name' \
           "$teroshdl_config" > "${teroshdl_config}.tmp" && mv "${teroshdl_config}.tmp" "$teroshdl_config"
    fi
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ TerosHDL!${NC}"
        echo -e "${BLUE}üìã –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤ TerosHDL: ${YELLOW}$project_name${NC}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
        local project_count=$(jq '.project_list | length' "$teroshdl_config")
        echo -e "${BLUE}üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ TerosHDL: ${YELLOW}$project_count${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ TerosHDL${NC}"
        return 1
    fi
}

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TerosHDL
echo ""
PROJECT_FULL_PATH="$(pwd)/$PROJECT_NAME"
TOPLEVEL_FILE="$PROJECT_FULL_PATH/src/${PROJECT_NAME}.v"
CONSTRAINT_FILE="$PROJECT_FULL_PATH/src/pinout.ucf"

add_project_to_teroshdl "$PROJECT_NAME" "$PROJECT_FULL_PATH" "$TOPLEVEL_FILE" "$CONSTRAINT_FILE" "$DEVICE" "$FAMILY" "$PACKAGE" "$SPEED"

echo ""
echo -e "${GREEN}üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ TerosHDL!${NC}"
echo -e "${BLUE}üí° –û—Ç–∫—Ä–æ–π—Ç–µ VS Code –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ TerosHDL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º.${NC}"
